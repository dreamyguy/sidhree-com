- var links = [{ git: "https://git-scm.com/", gulp: "http://gulpjs.com/", node: "https://nodejs.org/en/", selenium: "http://www.seleniumhq.org/", nightwatch: "http://nightwatchjs.org/", mocha: "https://mochajs.org/", chai: "http://chaijs.com/", jasmine: "http://jasmine.github.io/", trello: "https://trello.com/", jira: "https://www.atlassian.com/software/jira", agile: "https://en.wikipedia.org/wiki/Agile_software_development", scrum: "https://en.wikipedia.org/wiki/Scrum_(software_development)", kanban: "https://en.wikipedia.org/wiki/Kanban_(development)", repo_color: "https://github.com/dreamyguy/color-consolidator", repo_gitlog: "https://github.com/dreamyguy/gitlogg", repo_gitinsight: "https://github.com/dreamyguy/gitinsight" }];

- var link = links[0];

include global-mixins.jade
section(class=["nice-to-know"])
  div(class=["content"])
    .row
        div(class=["small-12", "columns"])
          +cueIcon("Tools I use", "code-fork")
            p.gutter-bottom
              | #[a(href=link.git) Git] for version control. #[a(href=link.gulp) Gulp] and #[a(href=link.node) Nodejs] for automating the concatenation, linting, minification, testing and the creation of the production-ready build. #[a(href=link.selenium) Selenium] combined with #[a(href=link.nightwatch) Nightwatchjs] for testing CI, #[a(href=link.mocha) Mocha] &amp; #[a(href=link.chai) Chai] (or #[a(href=link.jasmine) Jasmine]) for #[span(class="monospace") js] unit tests.
          +cueIcon("Workflow", "cogs")
            p.gutter-bottom
              | I organise my tasks with the help of the #[em(class=["open-sans-light-italic"]) KANBAN] workflow. This process helps one visualise progress and prioritise what gets done first. I use #[a(href=link.trello) Trello] privately and #[a(href=link.jira) JIRA] at the office. I've worked with #[a(href=link.agile) Agile], #[a(href=link.kanban) KANBAN] and #[a(href=link.scrum) SCRUM] software development methodologies, and believe all have their merits and gotchas. I find that a looser #[em(class=["open-sans-light-italic"]) "SCRUM - the best parts"] approach is the one that worked out best so far, when predictability and estimates are key.
          +cueIcon("Open-source projects", "flask")
            p.gutter-bottom
              | I have a few open-source projects on GitHub. All of them are #[em(class=["open-sans-light-italic"]) study projects], so take them with a grain of salt. #[a(href=link.repo_color) Color Consolidator] is an application that was created to help a group of UX and Front-enders consolidate and maintain color variables. #[a(href=link.repo_gitlog) Gitlog to JSON] is a project created to scan relevant commit information from one or multiple repos and output it to JSON. #[a(href=link.repo_gitinsight) Gitinsight] was created to visualise #[span(class="monospace") gitlog] data, and at its current state I would not even call it a #[em(class=["open-sans-light-italic"]) draft], but it's a work in progress. All these projects have their flaws and are #[em(class=["open-sans-light-italic", "fg-fav-purple-light"]) far from ready], but they're out there, #[em(class=["open-sans-light-italic", "fg-fav-purple-light"]) waiting for your contribution]!
