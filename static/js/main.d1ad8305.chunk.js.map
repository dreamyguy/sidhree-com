{"version":3,"sources":["components/About/About.js","components/Bar/Bar.js","components/Copyright/Copyright.js","components/Network/Network.js","components/NiceToKnow/NiceToKnow.js","components/Section/Section.js","pages/App.js","serviceWorker.js","index.js"],"names":["About","className","href","Bar","props","bottom","top","Copyright","Date","getFullYear","Network","title","NiceToKnow","Section","sectionClasses","contentClasses","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1ad8305.chunk.js","sourcesContent":["import React from 'react';\nimport './About.scss';\n\nconst About = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"small-12 columns align-center\">\n        <div className=\"section-image centered\"></div>\n        <h1 className=\"heading-one open-sans-bold fg-fav-occre-dark gutter-top-half no-margin-bottom\">Wallace Sidhrée</h1>\n        <h3 className=\"heading-three fg-sb-gray\">Senior Frontend Developer</h3>\n        <p className=\"gutter-bottom-half\">\n          Hi! I'm a web developer with strong graphic skills established in Oslo, Norway.\n          I love to bend code to my will and create a relevant online experience.<br/>\n          I deliver code that's version-controlled, thoroughly tested through\n          solid CI routines and built through efficient automation.\n        </p>\n        <p>See for yourself by peeking at <a href=\"https://github.com/dreamyguy/sidhree-com\" className=\"link-to-source-code\">the source code for this page on GitHub</a>.<br/>You're welcome to use it!</p>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport './Bar.scss';\n\nconst Bar = props => {\n  const { bottom, top } = props;\n  return (\n    <ul className={`bar${bottom ? ' pos-bottom-block' : ''}${top ? ' pos-top-block' : ''}`}>\n      <li className=\"bar-item bg-fav-orange-light\"></li>\n      <li className=\"bar-item bg-fav-orange-middle\"></li>\n      <li className=\"bar-item bg-fav-orange-dark\"></li>\n      <li className=\"bar-item bg-fav-pink-shock\"></li>\n      <li className=\"bar-item bg-fav-purple-light\"></li>\n      <li className=\"bar-item bg-fav-purple-middle\"></li>\n      <li className=\"bar-item bg-fav-purple-dark\"></li>\n      <li className=\"bar-item bg-fav-green-light\"></li>\n      <li className=\"bar-item bg-fav-green-dark\"></li>\n      <li className=\"bar-item bg-fav-occre-light\"></li>\n    </ul>\n  );\n};\n\nexport default Bar;\n","import React from 'react';\nimport './Copyright.scss';\n\nconst Copyright = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"small-12 columns\">\n        <p>Copyright &copy; <span className=\"year\">{new Date().getFullYear()}</span> Wallace Sidhrée.\n        </p>\n        <p className=\"copyright-mit fg-gray\"><a href=\"https://github.com/dreamyguy/sidhree-com\">Source</a> free to use under the terms of the <a href=\"https://opensource.org/licenses/MIT\">MIT License</a>.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Copyright;\n","import React from 'react';\nimport './Network.scss';\n\nconst Network = () => {\n  return (\n    <ul className=\"network-list centered\">\n      <li><a href=\"https://github.com/dreamyguy/\" title=\"GitHub\" className=\"fg-fav-beige-light no-decor\"><i className=\"icon icon-3x icon-fa-github\"></i></a></li>\n      <li><a href=\"https://twitter.com/dreamyguy\" title=\"Twitter\" className=\"fg-fav-beige-light no-decor\"><i className=\"icon icon-3x icon-fa-twitter\"></i></a></li>\n      <li><a href=\"https://www.linkedin.com/in/dreamyguy\" title=\"LinkedIn\" className=\"fg-fav-beige-light no-decor\"><i className=\"icon icon-3x icon-fa-linkedin-square\"></i></a></li>\n      <li><a href=\"http://stackoverflow.com/users/909777/wallace-sidhr%C3%A9e\" title=\"Stack Overflow\" className=\"fg-fav-beige-light no-decor\"><i className=\"icon icon-3x icon-fa-stack-overflow\"></i></a></li>\n    </ul>\n  );\n};\n\nexport default Network;\n","import React from 'react';\nimport './NiceToKnow.scss';\n\nconst NiceToKnow = () => {\n  return (\n    <div className=\"row\">\n      <div className=\"small-12 columns\">\n        <div>\n          <div className=\"row\">\n            <div className=\"small-12 medium-2 columns align-center\"><i className=\"icon icon-4x icon-fa-code-fork\"></i></div>\n            <div className=\"small-12 medium-10 columns\">\n              <h3 className=\"heading-three\">Tools I use</h3>\n              <p className=\"gutter-bottom\"><a href=\"https://git-scm.com/\">Git</a> for version control. <a href=\"http://gulpjs.com/\">Gulp</a> and <a href=\"https://nodejs.org/en/\">Nodejs</a> for automating the concatenation, linting, minification, testing and the creation of the production-ready build. <a href=\"http://www.seleniumhq.org/\">Selenium</a> combined with <a href=\"http://nightwatchjs.org/\">Nightwatchjs</a> for testing CI, <a href=\"https://mochajs.org/\">Mocha</a> &amp; <a href=\"http://chaijs.com/\">Chai</a> (or <a href=\"http://jasmine.github.io/\">Jasmine</a>) for <span className=\"monospace\">js</span> unit tests.</p>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"row\">\n            <div className=\"small-12 medium-2 columns align-center\"><i className=\"icon icon-4x icon-fa-cogs\"></i></div>\n            <div className=\"small-12 medium-10 columns\">\n              <h3 className=\"heading-three\">Workflow</h3>\n              <p className=\"gutter-bottom\">I organise my tasks with the help of the <em className=\"open-sans-light-italic\">KANBAN</em> workflow. This process helps one visualise progress and prioritise what gets done first. I use <a href=\"https://trello.com/\">Trello</a> privately and <a href=\"https://www.atlassian.com/software/jira\">JIRA</a> at the office. I've worked with <a href=\"https://en.wikipedia.org/wiki/Agile_software_development\">Agile</a>, <a href=\"https://en.wikipedia.org/wiki/Kanban_(development)\">KANBAN</a> and <a href=\"https://en.wikipedia.org/wiki/Scrum_(software_development)\">SCRUM</a> software development methodologies, and believe all have their merits and gotchas. I find that a looser <em className=\"open-sans-light-italic\">\"SCRUM - the best parts\"</em> approach is the one that worked out best so far, when predictability and estimates are key.</p>\n            </div>\n          </div>\n        </div>\n        <div>\n          <div className=\"row\">\n            <div className=\"small-12 medium-2 columns align-center\"><i className=\"icon icon-4x icon-fa-flask\"></i></div>\n            <div className=\"small-12 medium-10 columns\">\n              <h3 className=\"heading-three\">Open-source projects</h3>\n              <p className=\"gutter-bottom\">I have a few open-source projects on GitHub. All of them are <em className=\"open-sans-light-italic\">study projects</em>, so take them with a grain of salt. <a href=\"https://github.com/dreamyguy/color-consolidator\">Color Consolidator</a> is an application that was created to help a group of UX and Front-enders consolidate and maintain color variables. <a href=\"https://github.com/dreamyguy/gitlogg\">Gitlog to JSON</a> is a project created to scan relevant commit information from one or multiple repos and output it to JSON. <a href=\"https://github.com/dreamyguy/gitinsight\">Gitinsight</a> was created to visualise <span className=\"monospace\">gitlog</span> data, and at its current state I would not even call it a <em className=\"open-sans-light-italic\">draft</em>, but it's a work in progress. All these projects have their flaws and are <em className=\"open-sans-light-italic fg-fav-purple-light\">far from ready</em>, but they're out there, <em className=\"open-sans-light-italic fg-fav-purple-light\">waiting for your contribution</em>!</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NiceToKnow;\n","import React from 'react';\nimport './Section.scss';\n\nconst Section = props => {\n  const { sectionClasses, contentClasses, children } = props;\n  return (\n    <section className={sectionClasses || ''}>\n      <div className={`content${contentClasses ? ` ${contentClasses}` : ''}`}>\n        {children}\n      </div>\n    </section>\n  );\n};\n\nexport default Section;\n","import React from 'react';\nimport About from '../components/About/About';\nimport Bar from './../components/Bar/Bar';\nimport Copyright from '../components/Copyright/Copyright';\nimport Network from '../components/Network/Network';\nimport NiceToKnow from '../components/NiceToKnow/NiceToKnow';\nimport Section from '../components/Section/Section';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <>\n      <Bar top />\n      <Section sectionClasses=\"about\" contentClasses=\"text-shadow-light\">\n        <About />\n      </Section>\n      <Section sectionClasses=\"networks bg-fav-occre-dark fg-fav-beige-light\" contentClasses=\"align-center\">\n        <Network />\n      </Section>\n      <Section sectionClasses=\"nice-to-know\">\n        <NiceToKnow />\n      </Section>\n      <Section sectionClasses=\"copyright\" contentClasses=\"align-center\">\n        <Copyright />\n      </Section>\n      <Bar bottom />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}